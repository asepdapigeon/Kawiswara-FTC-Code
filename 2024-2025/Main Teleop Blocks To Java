package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.ServoController;

@TeleOp(name = "MainTeleOpBackup (Blocks to Java)")
public class MainTeleOpBackup extends LinearOpMode {

  private DcMotor kanan;
  private DcMotor kiri;
  private Servo armrotate2;
  private ServoController ControlHub_ServoController;
  private Servo armrotate;
  private CRServo intake;
  private DcMotor lifter;
  private DcMotor arm;
  private Servo claw;

  /**
   * This sample contains the bare minimum Blocks for any regular OpMode. The 3 blue
   * Comment Blocks show where to place Initialization code (runs once, after touching the
   * DS INIT button, and before touching the DS Start arrow), Run code (runs once, after
   * touching Start), and Loop code (runs repeatedly while the OpMode is active, namely not
   * Stopped).
   */
  @Override
  public void runOpMode() {
    kanan = hardwareMap.get(DcMotor.class, "kananAsDcMotor");
    kiri = hardwareMap.get(DcMotor.class, "kiriAsDcMotor");
    armrotate2 = hardwareMap.get(Servo.class, "armrotate2AsServo");
    ControlHub_ServoController = hardwareMap.get(ServoController.class, "Control Hub");
    armrotate = hardwareMap.get(Servo.class, "armrotateAsServo");
    intake = hardwareMap.get(CRServo.class, "intakeAsCRServo");
    lifter = hardwareMap.get(DcMotor.class, "lifterAsDcMotor");
    arm = hardwareMap.get(DcMotor.class, "armAsDcMotor");
    claw = hardwareMap.get(Servo.class, "clawAsServo");

    waitForStart();
    kanan.setDirection(DcMotor.Direction.REVERSE);
    kiri.setDirection(DcMotor.Direction.FORWARD);
    armrotate2.setDirection(Servo.Direction.REVERSE);
    ControlHub_ServoController.pwmDisable();
    armrotate.setPwmEnable();
    armrotate2.setPwmEnable();
    // Put initialization blocks here.
    if (opModeIsActive()) {
      while (opModeIsActive()) {
        // Put loop blocks here.
        intake.setPower(gamepad2.left_stick_y * -1);
        kiri.setPower(gamepad1.left_stick_y * (gamepad1.left_bumper ? -1 : -0.5));
        kanan.setPower(gamepad1.right_stick_y * (gamepad1.right_bumper ? -1 : -0.5));
        if (gamepad2.dpad_up == true) {
          lifter.setPower(0.85);
        } else if (gamepad2.dpad_down == true) {
          lifter.setPower(-0.85);
        } else {
          lifter.setPower(0);
        }
        if (gamepad2.right_stick_y == 1) {
          arm.setPower(0.3);
          gamepad2.rumble(1000);
        } else if (gamepad2.right_stick_y == -1) {
          arm.setPower(-0.4);
          gamepad2.rumble(1000);
        } else {
          arm.setPower(0);
          gamepad2.stopRumble();
        }
        if (gamepad2.a == true) {
          armrotate.setPosition(1);
          armrotate2.setPosition(1);
        } else if (gamepad2.y == true) {
          armrotate.setPosition(-1);
          armrotate2.setPosition(-1);
        }
        if (gamepad2.x == true) {
          claw.setPosition(0.3);
        } else if (gamepad2.b == true) {
          claw.setPosition(-1);
        }
        // Put run blocks here.
        telemetry.update();
      }
    }
  }
}