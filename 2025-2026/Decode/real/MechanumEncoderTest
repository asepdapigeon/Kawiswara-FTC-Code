package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

@TeleOp(name = "Mechanum Move 1 Rotation")
public class MechanumTeleop extends LinearOpMode {

  private DcMotor leftRear;
  private DcMotor leftFront;
  private DcMotor rightFront;
  private DcMotor rightRear;

  @Override
  public void runOpMode() {
    
    leftRear = hardwareMap.get(DcMotor.class, "leftRear");
    leftFront = hardwareMap.get(DcMotor.class, "leftFront");
    rightFront = hardwareMap.get(DcMotor.class, "rightFront");
    rightRear = hardwareMap.get(DcMotor.class, "rightRear");

    // Reverse left motors if needed
    leftRear.setDirection(DcMotor.Direction.REVERSE);
    leftFront.setDirection(DcMotor.Direction.REVERSE);

    // Wait for start
    waitForStart();

    if (opModeIsActive()) {
      DcMotor[] motors = {leftFront, leftRear, rightFront, rightRear};

      // Reset encoders and set target
      for (DcMotor motor : motors) {
          motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
          motor.setTargetPosition(537); // 1 wheel rotation
          motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
          motor.setPower(0.5); // Set a moderate speed
      }

      // Wait until all motors reach target
      while (opModeIsActive() && (leftFront.isBusy() || leftRear.isBusy() ||
              rightFront.isBusy() || rightRear.isBusy())) {
          telemetry.addData("LF Pos", leftFront.getCurrentPosition());
          telemetry.addData("RF Pos", rightFront.getCurrentPosition());
          telemetry.update();
      }

      // Stop motors
      for (DcMotor motor : motors) {
          motor.setPower(0);
      }

      // Optional: stay in telemetry loop
      while (opModeIsActive()) {
          telemetry.addLine("Movement complete.");
          telemetry.update();
      }
    }
  }
}
